using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace AwesomeSnippets {

    public static class MultipleTemplatesMenuItemGenerator {
        public const string AssetPath_Default = "Editor/";
        public const string Name_Generate_Class = "MultipleTemplatesMenuItems";
        public const string Name_Generate_File = Name_Generate_Class + ".cs";

        private const string header =
            "//auto generated by MultipleTemplatesMenuItemGenerator.cs\n" +
            "\n" +
            "using UnityEditor;\n" +
            "\n" +
            "namespace AwesomeSnippets {\n" +
            "\n" +
            "\t[InitializeOnLoad]\n" +
            "\tpublic static class MultipleTemplatesMenuItem {\n";

        private const string varsAndConstructor =
            "\t\tprivate static ScriptTemplateSettings settings;\n" +
            "\n" +
            "\t\tstatic MultipleTemplatesMenuItem() {\n" +
            "\t\t\tstring[] vs = AssetDatabase.FindAssets(\"t:ScriptTemplateSettings\");\n" +
            "\n" +
            "\t\t\tif (vs.Length > 0) {\n" +
            "\t\t\t\tsettings = AssetDatabase.LoadAssetAtPath<ScriptTemplateSettings>(AssetDatabase.GUIDToAssetPath(vs[0]));\n" +
            "\t\t\t}\n" +
            "\t\t}\n";

        private const string function =
            "\n" +
            "\t\t[MenuItem(\"##MENUPATH####SCRIPTNAME##\", false, 80)]\n" +
            "\t\tprivate static void CreateScript##SCRIPTNAMETRIM##() {\n" +
            "\t\t\tif (settings.Templates[##INDEX##]) {\n" +
            "\t\t\t\tstring templatePath = AssetDatabase.GetAssetPath(settings.Templates[##INDEX##]);\n" +
            "\t\t\t\tProjectWindowUtil.CreateScriptAssetFromTemplateFile(templatePath, \"##SCRIPTNAMETRIM##.cs\");\n" +
            "\t\t\t}\n" +
            "\t\t}\n" +
            "\n";

        private const string footer =
                "\t}\n" +
            "}";

        public static void GenerateMenuItemScript(ScriptTemplateSettings settings) {
            string menuItemPath = "Assets/Create/";
            if (settings.Templates.Count > 1) {
                menuItemPath = "Assets/Create/C# Script Templates/";
            }

            //HEADER
            StringBuilder stringBuilder = new StringBuilder();
            string strHeader = header.Replace("##CLASSNAME##", Name_Generate_Class);
            stringBuilder.Append(strHeader);
            stringBuilder.Append(varsAndConstructor);

            //BODY
            List<string> usedName = new List<string>();
            for (int loop = 0; loop < settings.Templates.Count; loop++) {
                TextAsset textAsset = settings.Templates[loop];
                if (textAsset != null) {
                    string assetName = textAsset.name;
                    if (usedName.Contains(assetName)) {
                        assetName += loop;
                    } else {
                        usedName.Add(assetName);
                    }

                    string strFunction = function
                        .Replace("##SCRIPTNAME##", assetName)
                        .Replace("##SCRIPTNAMETRIM##", assetName.Replace(" ", ""))
                        .Replace("##MENUPATH##", menuItemPath)
                        .Replace("##INDEX##", loop.ToString());

                    stringBuilder.Append(strFunction);
                }
            }

            //FOOTER
            stringBuilder.Append(footer);

            if (settings.GenerateFolder == null) {
                //write to default path
                string targetPath = Application.dataPath + "/" + AssetPath_Default + Name_Generate_File;
                Directory.CreateDirectory(Application.dataPath + "/" + AssetPath_Default);
                File.WriteAllText(targetPath, stringBuilder.ToString());

                AssetDatabase.ImportAsset("Assets/" + AssetPath_Default + Name_Generate_File);

                Debug.Log("Templates Updated");
            } else {
                try {
                    string projectPath = new DirectoryInfo(Application.dataPath).Parent.FullName + "/";
                    string assetPathScript = settings.GenerateFolderPath + "/" + Name_Generate_File;

                    File.WriteAllText(projectPath + assetPathScript, stringBuilder.ToString());

                    AssetDatabase.ImportAsset(assetPathScript);

                    Debug.Log("Templates Updated");
                } catch (DirectoryNotFoundException e) {
                    Debug.LogException(e);
                }
            }
        }
    }
}